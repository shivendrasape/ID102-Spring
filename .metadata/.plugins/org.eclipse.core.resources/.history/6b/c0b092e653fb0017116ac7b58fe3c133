package com.myapp.spring.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.myapp.spring.hibernate.model.Order;

@Repository // Instead of component annotation
public class OrderDAOImpl implements OrderDAO {

	@PersistenceContext // Applicable only for em not for other objects
	private EntityManager em;

	@Override
	public List<Order> findAll() {

		return em.createQuery("from Order").getResultList();
	}

	@Override
	@Transactional(propagation=Propagation.REQUIRED,isolation=Isolation.READ_COMMITTED,rollbackFor=HibernateException.class) // uncommitted records will never be read // If any hibernate exceptions are raised then rollback	// select it from spring  // It is also pointcut+advice // Transactions uses around advice
	public void save(Order order) {

		em.persist(order);
		em.merge(order);
	}

}


//after advice vs after return(only when returns sucesfully)
//after throwing-- this advice is for logging 