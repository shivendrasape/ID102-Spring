package com.myapp.spring.di;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;



@Component
@Scope("prototype") // this will cause myBean==myBean to return false..// it will clone the previous object & give new reference  which results in false ...which signifies it is not singleton(now) it is prototype pattern...N
public class MyBeanImpl implements MyBean {

	//@Autowired
	//@Qualifier("instance2")  // autowiring by the use name  // TwoImpl of one interface & hence ambiguity , so thats y we need to use Qualifier
	private GreetingBean greetingBean;
	
	
	@PostConstruct
	public void initialize() {
		System.out.println("Inside Init");
	}
	
	// testing autowiring by constructor
	@Autowired
	public MyBeanImpl(@Qualifier("instance2")GreetingBean greetingBean) {
		super();
		this.greetingBean = greetingBean;
	}



	@Override
	public String display() {
		
		return greetingBean.greeting();
	}

}
