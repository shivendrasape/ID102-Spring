package com.myapp.spring.hibernate.model;

import java.util.HashMap;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;

@Entity
//@Table(name="")
public class Employee {

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private long  id; 
	
	@NotEmpty  // annotation available due to hibernate validator & applicable to object level only-- when u create object it will check whether the fName is empty or not... compare it with to nullable .. it is at db level it will check whether the column is null or not 
	@Column
	private String fName;
	
	@NotEmpty
	@Column
	private String LName;
	
	@Email
	@Column(unique=true)
	private String email;
	
	
	@ManyToMany(fetch=FetchType.LAZY,cascade=CascadeType.ALL)    // fetch even not added its ok bcoz of default value is lazy
	@JoinTable(name="EMPLOYEE_BENEFITS",
	joinColumns=@JoinColumn(name="EMPLOYEE_ID"),
	inverseJoinColumns=@JoinColumn(name="BENEFIT_ID"))
	private Map<String, Benefit> benefits= new HashMap<>();
	
	public Employee() {
		
	}

	public Employee(String fName, String lName, String email) {
		super();
		this.fName = fName;
		LName = lName;
		this.email = email;
	
	}

	public long getId() {
		return id;
	}

	private void setId(long id) {
		this.id = id;
	}

	public String getfName() {
		return fName;
	}

	public void setfName(String fName) {
		this.fName = fName;
	}

	public String getLName() {
		return LName;
	}

	public void setLName(String lName) {
		LName = lName;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public Map<String, Benefit> getBenefits() {
		return benefits;
	}

	public void setBenefits(Map<String, Benefit> benefits) {
		this.benefits = benefits;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Employee [id=");
		builder.append(id);
		builder.append(", fName=");
		builder.append(fName);
		builder.append(", LName=");
		builder.append(LName);
		builder.append(", email=");
		builder.append(email);
		builder.append("]");
		return builder.toString();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result + (int) (id ^ (id >>> 32));
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof Employee))
			return false;
		Employee other = (Employee) obj;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (id != other.id)
			return false;
		return true;
	}
	
	
	
	
}
